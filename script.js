// ==================== C·∫§U H√åNH C∆† B·∫¢N ====================
const BACKEND_URL = "https://thamai-backend-new.onrender.com";

const chatBox = document.getElementById("chat-box");
const userInput = document.getElementById("user-input");
const sendBtn = document.getElementById("send-btn");
const recordBtn = document.getElementById("record-btn");

let isRecording = false;
let mediaRecorder;
let audioChunks = [];

// ==================== H√ÄM HI·ªÇN TH·ªä TIN NH·∫ÆN ====================
function appendMessage(sender, text) {
  const msg = document.createElement("div");
  msg.classList.add("message", sender);
  msg.textContent = text;
  chatBox.appendChild(msg);
  chatBox.scrollTop = chatBox.scrollHeight;
}

// ==================== G·ª¨I VƒÇN B·∫¢N T·ªöI BACKEND ====================
async function sendTextToBackend(text) {
  appendMessage("user", text);

  try {
    const res = await fetch(`${BACKEND_URL}/chat`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ message: text }),
    });

    const data = await res.json();

    if (data && data.reply) {
      appendMessage("ai", data.reply);
      speakText(data.reply); // G·ªåI TTS NGAY KHI AI TR·∫¢ L·ªúI
    } else {
      appendMessage("ai", "‚ö†Ô∏è Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ m√°y ch·ªß.");
    }
  } catch (err) {
    console.error(err);
    appendMessage("ai", "‚ö†Ô∏è L·ªói k·∫øt n·ªëi v·ªõi backend.");
  }
}

// ==================== X·ª¨ L√ù N√öT G·ª¨I VƒÇN B·∫¢N ====================
sendBtn.addEventListener("click", () => {
  const text = userInput.value.trim();
  if (text) {
    sendTextToBackend(text);
    userInput.value = "";
  }
});

userInput.addEventListener("keypress", (e) => {
  if (e.key === "Enter") {
    sendBtn.click();
  }
});

// ==================== GHI √ÇM & G·ª¨I √ÇM THANH T·ªöI BACKEND (WHISPER) ====================
recordBtn.addEventListener("click", async () => {
  if (!isRecording) {
    // B·∫Øt ƒë·∫ßu ghi √¢m
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorder = new MediaRecorder(stream);
      audioChunks = [];

      mediaRecorder.ondataavailable = (event) => {
        audioChunks.push(event.data);
      };

      mediaRecorder.onstop = async () => {
        const audioBlob = new Blob(audioChunks, { type: "audio/webm" });
        await sendAudioToBackend(audioBlob);
      };

      mediaRecorder.start();
      isRecording = true;
      recordBtn.textContent = "‚èπÔ∏è D·ª´ng";
      appendMessage("ai", "üéôÔ∏è ƒêang nghe...");
    } catch (err) {
      console.error("Kh√¥ng th·ªÉ ghi √¢m:", err);
      appendMessage("ai", "‚ùå Tr√¨nh duy·ªát kh√¥ng cho ph√©p ghi √¢m.");
    }
  } else {
    // D·ª´ng ghi √¢m
    mediaRecorder.stop();
    isRecording = false;
    recordBtn.textContent = "üéôÔ∏è Ghi √¢m";
    appendMessage("ai", "‚è≥ ƒêang x·ª≠ l√Ω √¢m thanh...");
  }
});

// ==================== G·ª¨I √ÇM THANH L√äN BACKEND (Whisper mi·ªÖn ph√≠ HuggingFace) ====================
async function sendAudioToBackend(audioBlob) {
  const formData = new FormData();
  formData.append("file", audioBlob, "speech.webm");

  try {
    const res = await fetch(`${BACKEND_URL}/speech-to-text`, {
      method: "POST",
      body: formData,
    });

    const data = await res.json();

    if (data && data.text) {
      appendMessage("user", `üó£Ô∏è ${data.text}`);
      sendTextToBackend(data.text);
    } else {
      appendMessage("ai", "‚ö†Ô∏è Kh√¥ng th·ªÉ nh·∫≠n di·ªán gi·ªçng n√≥i.");
    }
  } catch (err) {
    console.error("L·ªói g·ª≠i audio:", err);
    appendMessage("ai", "‚ö†Ô∏è L·ªói khi g·ª≠i √¢m thanh l√™n server.");
  }
}

// ==================== PH√ÅT √ÇM THANH (TTS ‚Äì TEXT TO SPEECH) ====================
function speakText(text) {
  if (!window.speechSynthesis) {
    console.warn("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ TTS.");
    return;
  }

  const utterance = new SpeechSynthesisUtterance(text);
  utterance.lang = "vi-VN";
  utterance.rate = 1;
  utterance.pitch = 1;
  utterance.volume = 1;
  speechSynthesis.speak(utterance);
}
